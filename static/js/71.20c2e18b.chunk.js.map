{"version":3,"file":"static/js/71.20c2e18b.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","redux/contacts/selectors.js","components/Forms/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["//import PropTypes from 'prop-types';\nimport {  Stack } from '@mui/material';\nimport { StyledTypography } from 'styles/styles.js';\n\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Stack component=\"section\"  sx={{ margin: '0 auto 32px', maxWidth: '450px'}} >\n      <StyledTypography variant=\"h4\" component=\"h2\" >\n  {title}\n</StyledTypography>\n      {children}\n    </Stack>\n  );\n};\n\n// Section.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   children: PropTypes.oneOfType([\n//     PropTypes.arrayOf(PropTypes.node),\n//     PropTypes.node,\n//   ]).isRequired,\n// };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectAllContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectAllContacts, selectFilter],\n  (contacts, contactsFilter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(contactsFilter.toLowerCase().trim())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations.js';\nimport { selectError } from 'redux/contacts/selectors.js';\nimport { selectAllContacts } from 'redux/contacts/selectors.js';\nimport { toast } from 'react-toastify';\nimport { Input, InputLabel, Stack } from '@mui/material';\nimport { StyledButton, StyledFormControl } from 'styles/styles.js';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n  const error = useSelector(selectError);\n  const [{ name, number }, setValues] = useState(initialValues);\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (nameUnique(name)) {\n      dispatch(addContact({ name, number }));\n      toast.success(`${name} added to your contacts.`);\n      setValues(initialValues);\n    }\n  };\n\n  const nameUnique = newName => {\n    const searchUnique = newName.toLowerCase();\n\n    if (contacts.find(({ name }) => name.toLowerCase() === searchUnique)) {\n      toast.error(`${newName} is already in contacts.`);\n      return false;\n    }\n    return true;\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setValues(prevValues => ({ ...prevValues, [name]: value }));\n  };\n\n  if (error) {\n    toast.error(`ERROR`);\n    return null;\n  }\n\n  return (\n    <Stack\n      sx={{ alignItems: 'center' }}\n      component=\"form\"\n      onSubmit={handleFormSubmit}\n    >\n      <StyledFormControl required fullWidth>\n        <InputLabel htmlFor=\"standard-adornment-name\">Name</InputLabel>\n        <Input\n          id=\"standard-adornment-name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          inputProps={{\n            pattern: \"[A-Za-zĄąĆćĘęŁłŃńÓóŚśŹźŻż\\\\-' ]+\",\n            title:\n              'Only letters, apostrophe, dash, spaces, and Polish characters are allowed',\n          }}\n        />\n      </StyledFormControl>\n      <StyledFormControl required fullWidth>\n        <InputLabel htmlFor=\"standard-adornment-number\">Number</InputLabel>\n        <Input\n          id=\"standard-adornment-number\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          inputProps={{\n            pattern: '^[+]?[0-9 \\\\u0028\\\\u0029\\\\u002D]*$',\n            title:\n              \"Phone number must consist of digits and may include spaces, dashes, and parentheses. It can start with '+'\",\n          }}\n        />\n      </StyledFormControl>\n      <StyledButton type=\"submit\">Add Contact</StyledButton>\n    </Stack>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice.js';\nimport { selectFilter } from 'redux/contacts/selectors.js';\nimport { TextField, Stack } from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Stack>\n      <TextField\n        label=\"Find contacts by name\"\n        type=\"search\"\n        variant=\"standard\"\n        value={filter}\n        name=\"filter\"\n        onChange={handleFilter}\n      />\n    </Stack>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations.js';\n//import PropTypes from 'prop-types';\nimport { ListItem, ListItemButton, ListItemText } from '@mui/material';\nimport { DeleteButton } from 'styles/styles.js';\n\nimport { toast } from 'react-toastify';\nimport { selectError } from 'redux/contacts/selectors.js';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n    toast.info(`${contact.name} removed from your contacts.`);\n  };\n\n  if (error) {\n    toast.error(`ERROR`);\n    return (\n      <h2 className=\"text\" style={{ fontSize: '40px' }}>\n        ERROR\n      </h2>\n    );\n  }\n\n  return (\n    <ListItem\n      secondaryAction={\n        <DeleteButton\n          edge=\"end\"\n          aria-label=\"delete contact\"\n          onClick={handleDelete}\n          type=\"button\"\n         \n        >\n          Delete\n        </DeleteButton>\n      }\n      disablePadding\n    >\n      <ListItemButton role=\"undefined\" dense>\n        <ListItemText  primary={contact.name}  sx={{flexBasis: '20%'}} />\n        <ListItemText secondary={contact.number} sx={{flexBasis: '50%'}} />\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\n// ContactItem.propTypes = {\n//   contact: PropTypes.shape({\n//     name: PropTypes.string.isRequired,\n//     phone: PropTypes.string.isRequired,\n//   }).isRequired,\n// };\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectFilteredContacts } from 'redux/contacts/selectors.js';\nimport { selectError } from 'redux/contacts/selectors.js';\nimport { StyledList } from 'styles/styles.js';\n\nimport { toast } from 'react-toastify';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n\n  if (error) {\n    toast.info(`Error`);\n    return (\n      <h2 className=\"text\" style={{ fontSize: '40px' }}>\n        ERROR\n      </h2>\n    );\n  }\n\n  if (filteredContacts.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <StyledList sx={{ width: '100%', marginTop: 2 }}>\n        {filteredContacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations.js';\nimport { selectLoading } from 'redux/contacts/selectors.js';\nimport { Helmet } from 'react-helmet-async';\nimport { Typography } from '@mui/material';\nimport { Section } from 'components/Section/Section.jsx';\nimport { ContactForm } from 'components/Forms/ContactForm.jsx';\nimport Loader from 'components/Loader/Loader.jsx';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\nimport { selectAllContacts } from 'redux/contacts/selectors.js';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(selectAllContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <Section title=\"Phonebook\">\n        <ContactForm />\n        {isLoading && <Loader />}\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts.length > 0 ? (\n          <Filter />\n        ) : (\n          <Typography align=\"center\">\n            Looks like you don`t have any contacts yet or just clear them all.\n            Please add new contact.\n          </Typography>\n        )}\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["Section","title","children","component","sx","margin","maxWidth","variant","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","selectError","error","selectFilteredContacts","createSelector","contactsFilter","contact","name","toLowerCase","includes","trim","initialValues","number","ContactForm","dispatch","useDispatch","useSelector","useState","setValues","nameUnique","newName","searchUnique","find","toast","handleInputChange","e","target","value","prevValues","Stack","alignItems","onSubmit","preventDefault","addContact","required","fullWidth","InputLabel","htmlFor","Input","id","type","onChange","inputProps","pattern","Filter","TextField","label","setFilter","ContactItem","className","style","fontSize","ListItem","secondaryAction","edge","onClick","deleteContact","disablePadding","ListItemButton","role","dense","ListItemText","primary","flexBasis","secondary","ContactList","filteredContacts","length","width","marginTop","map","Contacts","useEffect","fetchContacts","Loader","Typography","align"],"sourceRoot":""}